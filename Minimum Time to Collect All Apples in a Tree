class Solution {
    public int minTime(int n, int[][] edges, List<Boolean> hasApple) {
      List<List<Integer>> adj=new ArrayList<>();
      //step1:create adjacency matrix to store each edge
      for(int i=0;i<n;i++){
          adj.add(new ArrayList<>());
      }
      for(int edge[]:edges){
          adj.get(edge[0]).add(edge[1]);
          adj.get(edge[1]).add(edge[0]);
      }
      //step2:visited array used to store the visited nodes and not to visit visited nodes
      boolean vis[]=new boolean[n];
      //step3:traverse through the tree and search for the apples
      //case1:has apple
      //case2:path has apple
      return dfs(adj,vis,hasApple,0);
    }
    int dfs(List<List<Integer>> adj,boolean vis[],List<Boolean> hasApple,int index){
        vis[index]=true;//visited
        int ans=0;
        for(int neig:adj.get(index)){
            if(vis[neig]!=true){//traverse all the neigbhours
                ans=ans+dfs(adj,vis,hasApple,neig);
            }
        }
        if(index==0){
            return ans;
        }
        if(hasApple.get(index)==true || ans>0){//2 cases
            ans=ans+2;
        }
        return ans;
    }
}


